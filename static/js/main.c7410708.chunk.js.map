{"version":3,"sources":["constants/TodosStatusQuery.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","utils/getData.ts","components/TodoModal/TodoModal.tsx","services/getUserByID.ts","App.tsx","services/getTodos.ts","index.tsx"],"names":["TodosStatusQuery","TodoList","todos","selectedTodo","setSelectedTodo","className","map","todo","id","completed","title","type","onClick","TodoFilter","setPreparedTodos","useState","textQuery","setTextQuery","All","statusQuery","setStatusQuery","useEffect","filteredTodos","query","Active","filter","Completed","getFiltredTodosByStatus","toLowerCase","includes","getFiltredTodosByText","onChange","event","target","value","placeholder","style","pointerEvents","Loader","getData","url","fetch","then","response","json","TodoModal","loading","setLoading","user","setUser","userID","userId","userFromServer","href","name","App","setTodos","preparedTodos","todosFromServer","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c7410708.chunk.js","sourcesContent":["enum TodosStatusQuery {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n\nexport default TodosStatusQuery;\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[],\n  selectedTodo: Todo | null,\n  setSelectedTodo: React.Dispatch<React.SetStateAction<Todo | null>>;\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodo,\n  setSelectedTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <tr\n          data-cy=\"todo\"\n          key={todo.id}\n        >\n\n          <td className=\"is-vcentered\">{todo.id}</td>\n\n          <td className=\"is-vcentered\">\n            {todo.completed && (\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            )}\n          </td>\n\n          <td className=\"is-vcentered is-expanded\">\n            <p\n              className={todo.completed\n                ? 'has-text-success'\n                : 'has-text-danger'}\n            >\n              {todo.title}\n            </p>\n          </td>\n\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => setSelectedTodo(todo)}\n            >\n              <span className=\"icon\">\n                <i\n                  className={`far\n                  ${selectedTodo?.id === todo.id\n                      ? 'fa-eye-slash'\n                      : 'fa-eye'\n                    }`}\n                />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","import React, { useEffect, useState } from 'react';\nimport { Todo } from '../../types/Todo';\nimport TodosStatusQuery from '../../constants/TodosStatusQuery';\n\ninterface Props {\n  todos: Todo[];\n  setPreparedTodos: React.Dispatch<React.SetStateAction<Todo[]>>;\n}\n\nconst getFiltredTodosByStatus = (todos: Todo[], query: TodosStatusQuery) => {\n  if (query === TodosStatusQuery.All) {\n    return todos;\n  }\n\n  switch (query) {\n    case TodosStatusQuery.Active:\n      return todos.filter(todo => !todo.completed);\n    case TodosStatusQuery.Completed:\n      return todos.filter(todo => todo.completed);\n    default:\n      return todos;\n  }\n};\n\nconst getFiltredTodosByText = (todos: Todo[], query: string) => {\n  return todos.filter(todo => {\n    return todo.title.toLowerCase().includes(query.toLowerCase());\n  });\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  todos,\n  setPreparedTodos,\n}) => {\n  const [textQuery, setTextQuery] = useState('');\n  const [statusQuery, setStatusQuery] = useState(TodosStatusQuery.All);\n\n  useEffect(() => {\n    let filteredTodos = getFiltredTodosByStatus(todos, statusQuery);\n\n    filteredTodos = getFiltredTodosByText(filteredTodos, textQuery);\n\n    setPreparedTodos(filteredTodos);\n  }, [todos, textQuery, statusQuery, setPreparedTodos]);\n\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setStatusQuery(event.target.value as TodosStatusQuery);\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleSelectChange}\n          >\n            <option value={TodosStatusQuery.All}>All</option>\n            <option value={TodosStatusQuery.Active}>Active</option>\n            <option value={TodosStatusQuery.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={textQuery}\n          onChange={(event) => setTextQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {textQuery && (\n            /* eslint-disable-next-line jsx-a11y/control-has-associated-label */\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => setTextQuery('')}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable-next-line */\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api/';\n\nexport function getData<T>(url: string): Promise<T> {\n  return fetch(BASE_URL + url)\n    .then(response => response.json());\n}\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUserByID } from '../../services/getUserByID';\n\ninterface Props {\n  todo: Todo;\n  setSelectedTodo: React.Dispatch<React.SetStateAction<Todo | null>>;\n}\n\nexport const TodoModal: React.FC<Props> = ({\n  todo,\n  setSelectedTodo,\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    setLoading(true);\n    getUserByID(todo.userId).then(userFromServer => {\n      setUser(userFromServer);\n      setLoading(false);\n    });\n  }, [todo.userId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {loading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {todo.id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => setSelectedTodo(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {/* <strong className=\"has-text-success\">Done</strong> */}\n              <strong className=\"has-text-danger\">\n                {todo.completed ? 'Done' : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href=\"mailto:Sincere@april.biz\">\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { User } from '../types/User';\nimport { getData } from '../utils/getData';\n\nexport function getUserByID(userID: number) {\n  return getData<User>(`users/${userID}.json`);\n}\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './services/getTodos';\nimport { Todo } from './types/Todo';\n\nexport const App: React.FC = () => {\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [preparedTodos, setPreparedTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    getTodos().then(todosFromServer => {\n      setTodos(todosFromServer);\n      setPreparedTodos(todosFromServer);\n    });\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                todos={todos}\n                setPreparedTodos={setPreparedTodos}\n              />\n            </div>\n\n            <div className=\"block\">\n              {todos.length === 0\n                ? (<Loader />)\n                : (\n                  <TodoList\n                    todos={preparedTodos}\n                    selectedTodo={selectedTodo}\n                    setSelectedTodo={setSelectedTodo}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          setSelectedTodo={setSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import { Todo } from '../types/Todo';\nimport { getData } from '../utils/getData';\n\nexport function getTodos() {\n  return getData<Todo[]>('todos.json');\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}